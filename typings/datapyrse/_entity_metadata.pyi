from dataclasses import dataclass
from typing import Any

@dataclass
class ManyToManyRelationshipMetadata:
    entity_1_intersect_attribute: str
    entity_1_logical_name: str
    entity_1_navigation_property_name: str
    entity_2_intersect_attribute: str
    entity_2_logical_name: str
    entity_2_navigation_property_name: str
    schema_name: str
    intersect_entity_name: str
    @staticmethod
    def from_json(json: dict[str, Any]) -> ManyToManyRelationshipMetadata: ...
    def __init__(self, entity_1_intersect_attribute, entity_1_logical_name, entity_1_navigation_property_name, entity_2_intersect_attribute, entity_2_logical_name, entity_2_navigation_property_name, schema_name, intersect_entity_name) -> None: ...

@dataclass
class ManyToOneRelationshipMetadata:
    referenced_attribute: str
    referenced_entity: str
    referenced_entity_navigation_property_name: str
    referencing_attribute: str
    referencing_entity: str
    referencing_entity_navigation_property_name: str
    schema_name: str
    @staticmethod
    def from_json(json: dict[str, Any]) -> ManyToOneRelationshipMetadata: ...
    def __init__(self, referenced_attribute, referenced_entity, referenced_entity_navigation_property_name, referencing_attribute, referencing_entity, referencing_entity_navigation_property_name, schema_name) -> None: ...

@dataclass
class OneToManyRelationshipMetadata:
    referenced_attribute: str
    referenced_entity: str
    referenced_entity_navigation_property_name: str
    referencing_attribute: str
    referencing_entity: str
    referencing_entity_navigation_property_name: str
    schema_name: str
    @staticmethod
    def from_json(json: dict[str, Any]) -> OneToManyRelationshipMetadata: ...
    def __init__(self, referenced_attribute, referenced_entity, referenced_entity_navigation_property_name, referencing_attribute, referencing_entity, referencing_entity_navigation_property_name, schema_name) -> None: ...

@dataclass
class AttributeMetadata:
    logical_name: str | None = ...
    attribute_type: str | None = ...
    schema_name: str | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> AttributeMetadata: ...
    def __init__(self, logical_name=..., attribute_type=..., schema_name=...) -> None: ...

@dataclass
class LocalizedLabel:
    has_changed: bool | None | None = ...
    is_managed: bool | None = ...
    label: str | None = ...
    language_code: int | None = ...
    metadata_id: str | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> LocalizedLabel: ...
    def __init__(self, has_changed=..., is_managed=..., label=..., language_code=..., metadata_id=...) -> None: ...

@dataclass
class EntityMetadata:
    attributes: list[AttributeMetadata] | None = ...
    logical_name: str | None = ...
    logical_collection_name: str | None = ...
    schema_name: str | None = ...
    primary_id_attribute: str | None = ...
    primary_name_attribute: str | None = ...
    one_to_many_relationships: list[OneToManyRelationshipMetadata] | None = ...
    many_to_one_relationships: list[ManyToOneRelationshipMetadata] | None = ...
    many_to_many_relationships: list[ManyToManyRelationshipMetadata] | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> EntityMetadata: ...
    def __init__(self, attributes=..., logical_name=..., logical_collection_name=..., schema_name=..., primary_id_attribute=..., primary_name_attribute=..., one_to_many_relationships=..., many_to_one_relationships=..., many_to_many_relationships=...) -> None: ...

@dataclass
class OrgMetadata:
    entities: list[EntityMetadata] | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> OrgMetadata: ...
    def __init__(self, entities=...) -> None: ...
