from dataclasses import dataclass
from typing import Any

@dataclass
class AttributeMetadata:
    logical_name: str | None = ...
    attribute_type: str | None = ...
    schema_name: str | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> AttributeMetadata: ...
    def __init__(self, logical_name=..., attribute_type=..., schema_name=...) -> None: ...

@dataclass
class LocalizedLabel:
    has_changed: bool | None | None = ...
    is_managed: bool | None = ...
    label: str | None = ...
    language_code: int | None = ...
    metadata_id: str | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> LocalizedLabel: ...
    def __init__(self, has_changed=..., is_managed=..., label=..., language_code=..., metadata_id=...) -> None: ...

@dataclass
class EntityMetadata:
    attributes: list[AttributeMetadata] | None = ...
    logical_name: str | None = ...
    logical_collection_name: str | None = ...
    schema_name: str | None = ...
    primary_id_attribute: str | None = ...
    primary_name_attribute: str | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> EntityMetadata: ...
    def __init__(self, attributes=..., logical_name=..., logical_collection_name=..., schema_name=..., primary_id_attribute=..., primary_name_attribute=...) -> None: ...

@dataclass
class OrgMetadata:
    entities: list[EntityMetadata] | None = ...
    @staticmethod
    def from_json(json: dict[str, Any]) -> OrgMetadata: ...
    def __init__(self, entities=...) -> None: ...
